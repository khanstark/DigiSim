{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to digisim! For full python code visit https://github.com/khanstark/digisim . Prerequisites You need to install tkinter first to work with logic gates functionality of the library. Install tkinter by using command below- sudo apt-get install python-tk - For ubuntu versions 16x and below. sudo apt install python-tk - For ubuntu versions 18x and above. For windows, install tkinter by using this link-- https://wiki.python.org/moin/TkInter Installation Currently we only have support for python 2.x. Use one of the following commands to install the library. pip install digisim - Make sure your default python interpreter is python 2.x. python -m pip install digisim - Can be used on windows. sudo pip install digisim - Try giving sudo access. pip2 install digisim - Try this in case above commands return error. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-digisim","text":"For full python code visit https://github.com/khanstark/digisim .","title":"Welcome to digisim!"},{"location":"#prerequisites","text":"You need to install tkinter first to work with logic gates functionality of the library. Install tkinter by using command below- sudo apt-get install python-tk - For ubuntu versions 16x and below. sudo apt install python-tk - For ubuntu versions 18x and above. For windows, install tkinter by using this link-- https://wiki.python.org/moin/TkInter","title":"Prerequisites"},{"location":"#installation","text":"Currently we only have support for python 2.x. Use one of the following commands to install the library. pip install digisim - Make sure your default python interpreter is python 2.x. python -m pip install digisim - Can be used on windows. sudo pip install digisim - Try giving sudo access. pip2 install digisim - Try this in case above commands return error.","title":"Installation"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"func/","text":"Inbuilt functions Major functionalities provided in the library are as follows- Expression minimization Given a boolean algebraic expression, we use classic Quine-McCluskey algorithm to return a minimised expression, by removing redundancies. To get your reduced expression, use following lines of code- from digisim.minimize import digi_minimize expr='a+ab' reduced_expr=digi_minimize(2,expr) # 2 represents number of boolean variables print (reduced_expr) Note: Use lowercase notations to represent boolean variables in uncomplemented form, and uppercase notations to represent in complemented form. Test case generator Given a boolean algebraic expression, we can get all possible inputs acquired by it, along with corresponding outputs in table form on the terminal. To get your test cases for the expression, use following lines of code- from digisim.generate import testcases expr='a+ab' testcases(expr) # prints all valid input-output combinations on the terminal. To get a specific output of a given input for the expression, use following lines of code- from digisim.generate import testcases expr='a+ab' out=testcases(expr,{'a':'1','b':'0'}) # dict contains values of a and b. print (out) Note: Use lowercase notations to represent boolean variables in uncomplemented form, and uppercase notations to represent in complemented form. Logic gates representation Given a boolean algebraic expression, we can get a diagrammatic representation of logic circuit, employing AND, OR, NAND,and NOR gates. To view general gates representation, use following lines of code- from digisim.gate import gates expr='a+b+c' gates(expr) # make sure to pass minimised expression in this function via digi_minimize() method To view NAND gates representation, use following lines of code- from digisim.gate import gnand expr='a+b+c' gnand(expr) # make sure to pass minimised expression in this function via digi_minimize() method To view NOR gates representation, use following lines of code- from digisim.gate import gnor expr='a+b+c' gnor(expr) # make sure to pass minimised expression in this function via digi_minimize() method Sequential circuits We can simulate working of a sequentail circuit employing D, T, or J-K flip-flops. You just need to pass in number of flip-flops, and number of cycles after which you want to see the output. For example, from digisim.sequential import FlipFlop FlipFlop(3,3) # 3 flip-flops to be used, and 3 cycles need to iterated ('The flipflop names are: ', ['f1', 'f2', 'f3'], 'and its complements are: ', ['F1', 'F2', 'F3']) ('FlipFlop No', 1, ': ') Enter the choice for type of flipflop as 1.T-FlipFlop 2.D-FlipFlop 3.J-K FlipFlop Enter it here: 2 Enter initial value in 0 or 1: 0 Enter the equation: f2 ('FlipFlop No', 2, ': ') Enter the choice for type of flipflop as 1.T-FlipFlop 2.D-FlipFlop 3.J-K FlipFlop Enter it here: 1 Enter initial value in 0 or 1: 1 Enter the equation: f1 ('FlipFlop No', 3, ': ') Enter the choice for type of flipflop as 1.T-FlipFlop 2.D-FlipFlop 3.J-K FlipFlop Enter it here: 2 Enter initial value in 0 or 1: 1 Enter the equation: f2+f3 sequence: 011 -- 111 -- 101 -- 011 Sequence Value at cycle 3 : 011","title":"Functions"},{"location":"func/#inbuilt-functions","text":"Major functionalities provided in the library are as follows-","title":"Inbuilt functions"},{"location":"func/#expression-minimization","text":"Given a boolean algebraic expression, we use classic Quine-McCluskey algorithm to return a minimised expression, by removing redundancies. To get your reduced expression, use following lines of code- from digisim.minimize import digi_minimize expr='a+ab' reduced_expr=digi_minimize(2,expr) # 2 represents number of boolean variables print (reduced_expr) Note: Use lowercase notations to represent boolean variables in uncomplemented form, and uppercase notations to represent in complemented form.","title":"Expression minimization"},{"location":"func/#test-case-generator","text":"Given a boolean algebraic expression, we can get all possible inputs acquired by it, along with corresponding outputs in table form on the terminal. To get your test cases for the expression, use following lines of code- from digisim.generate import testcases expr='a+ab' testcases(expr) # prints all valid input-output combinations on the terminal. To get a specific output of a given input for the expression, use following lines of code- from digisim.generate import testcases expr='a+ab' out=testcases(expr,{'a':'1','b':'0'}) # dict contains values of a and b. print (out) Note: Use lowercase notations to represent boolean variables in uncomplemented form, and uppercase notations to represent in complemented form.","title":"Test case generator"},{"location":"func/#logic-gates-representation","text":"Given a boolean algebraic expression, we can get a diagrammatic representation of logic circuit, employing AND, OR, NAND,and NOR gates. To view general gates representation, use following lines of code- from digisim.gate import gates expr='a+b+c' gates(expr) # make sure to pass minimised expression in this function via digi_minimize() method To view NAND gates representation, use following lines of code- from digisim.gate import gnand expr='a+b+c' gnand(expr) # make sure to pass minimised expression in this function via digi_minimize() method To view NOR gates representation, use following lines of code- from digisim.gate import gnor expr='a+b+c' gnor(expr) # make sure to pass minimised expression in this function via digi_minimize() method","title":"Logic gates representation"},{"location":"func/#sequential-circuits","text":"We can simulate working of a sequentail circuit employing D, T, or J-K flip-flops. You just need to pass in number of flip-flops, and number of cycles after which you want to see the output. For example, from digisim.sequential import FlipFlop FlipFlop(3,3) # 3 flip-flops to be used, and 3 cycles need to iterated ('The flipflop names are: ', ['f1', 'f2', 'f3'], 'and its complements are: ', ['F1', 'F2', 'F3']) ('FlipFlop No', 1, ': ') Enter the choice for type of flipflop as 1.T-FlipFlop 2.D-FlipFlop 3.J-K FlipFlop Enter it here: 2 Enter initial value in 0 or 1: 0 Enter the equation: f2 ('FlipFlop No', 2, ': ') Enter the choice for type of flipflop as 1.T-FlipFlop 2.D-FlipFlop 3.J-K FlipFlop Enter it here: 1 Enter initial value in 0 or 1: 1 Enter the equation: f1 ('FlipFlop No', 3, ': ') Enter the choice for type of flipflop as 1.T-FlipFlop 2.D-FlipFlop 3.J-K FlipFlop Enter it here: 2 Enter initial value in 0 or 1: 1 Enter the equation: f2+f3 sequence: 011 -- 111 -- 101 -- 011 Sequence Value at cycle 3 : 011","title":"Sequential circuits"}]}